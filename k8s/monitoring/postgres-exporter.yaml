# PostgreSQL Exporter for Database Metrics
# Provides Prometheus metrics for PostgreSQL database

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: 3-tier-app-eks
  labels:
    app: postgres-exporter
    tier: database
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
        tier: database
        component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.11.1
        env:
        # Database connection URL from existing secret
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: DATABASE_URL
        
        # Custom queries configuration
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"
        
        # Disable default metrics we don't need
        - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
          value: "false"
        
        # Auto-discover databases
        - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
          value: "true"
        
        # Connection timeout
        - name: PG_EXPORTER_TIMEOUT
          value: "10s"
        
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Mount custom queries
        volumeMounts:
        - name: queries-config
          mountPath: /etc/postgres_exporter
          readOnly: true
      
      volumes:
      - name: queries-config
        configMap:
          name: postgres-exporter-config
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534

---
# Service for PostgreSQL Exporter
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: 3-tier-app-eks
  labels:
    app: postgres-exporter
    tier: database
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: postgres-exporter
  ports:
  - name: metrics
    port: 9187
    targetPort: 9187
    protocol: TCP
  type: ClusterIP

---
# ConfigMap with custom PostgreSQL queries
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-exporter-config
  namespace: 3-tier-app-eks
  labels:
    app: postgres-exporter
    component: monitoring
data:
  queries.yaml: |
    # Custom PostgreSQL queries for better monitoring
    
    # Database size metrics
    pg_database_size:
      query: |
        SELECT datname, 
               pg_database_size(datname) as size_bytes,
               pg_size_pretty(pg_database_size(datname)) as size_human
        FROM pg_database 
        WHERE datistemplate = false
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - size_bytes:
            usage: "GAUGE"
            description: "Database size in bytes"
    
    # Table size metrics
    pg_table_size:
      query: |
        SELECT schemaname, 
               tablename, 
               pg_total_relation_size(schemaname||'.'||tablename) as size_bytes,
               pg_relation_size(schemaname||'.'||tablename) as table_size_bytes,
               pg_indexes_size(schemaname||'.'||tablename) as indexes_size_bytes
        FROM pg_tables 
        WHERE schemaname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
      metrics:
        - schemaname:
            usage: "LABEL"
            description: "Schema name"
        - tablename:
            usage: "LABEL"
            description: "Table name"
        - size_bytes:
            usage: "GAUGE"
            description: "Total table size including indexes in bytes"
        - table_size_bytes:
            usage: "GAUGE"
            description: "Table size in bytes"
        - indexes_size_bytes:
            usage: "GAUGE"
            description: "Indexes size in bytes"
    
    # Connection metrics
    pg_connections:
      query: |
        SELECT state,
               count(*) as connections
        FROM pg_stat_activity
        WHERE state IS NOT NULL
        GROUP BY state
      metrics:
        - state:
            usage: "LABEL"
            description: "Connection state"
        - connections:
            usage: "GAUGE"
            description: "Number of connections in this state"
    
    # Long running queries
    pg_long_running_queries:
      query: |
        SELECT count(*) as long_queries
        FROM pg_stat_activity 
        WHERE state = 'active' 
        AND now() - query_start > interval '5 minutes'
      metrics:
        - long_queries:
            usage: "GAUGE"
            description: "Number of queries running longer than 5 minutes"
    
    # Lock metrics
    pg_locks:
      query: |
        SELECT mode, count(*) as locks
        FROM pg_locks
        GROUP BY mode
      metrics:
        - mode:
            usage: "LABEL"
            description: "Lock mode"
        - locks:
            usage: "GAUGE"
            description: "Number of locks in this mode"
    
    # Replication lag (if using replication)
    pg_replication_lag:
      query: |
        SELECT application_name,
               client_addr,
               state,
               pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn) as send_lag_bytes,
               pg_wal_lsn_diff(sent_lsn, flush_lsn) as flush_lag_bytes,
               pg_wal_lsn_diff(flush_lsn, replay_lsn) as replay_lag_bytes,
               extract(epoch from (now() - backend_start)) as backend_age_seconds
        FROM pg_stat_replication
      metrics:
        - application_name:
            usage: "LABEL"
            description: "Application name of the standby"
        - client_addr:
            usage: "LABEL"
            description: "IP address of the standby server"
        - state:
            usage: "LABEL"
            description: "Current WAL sender state"
        - send_lag_bytes:
            usage: "GAUGE"
            description: "Lag in bytes between sent and current WAL"
        - flush_lag_bytes:
            usage: "GAUGE"
            description: "Lag in bytes between sent and flushed WAL"
        - replay_lag_bytes:
            usage: "GAUGE"
            description: "Lag in bytes between flushed and replayed WAL"
        - backend_age_seconds:
            usage: "GAUGE"
            description: "Age of backend in seconds"
    
    # Cache hit ratio
    pg_cache_hit_ratio:
      query: |
        SELECT datname,
               round((blks_hit::float / (blks_hit + blks_read) * 100)::numeric, 2) as cache_hit_ratio
        FROM pg_stat_database
        WHERE datname NOT IN ('template0', 'template1', 'postgres')
        AND blks_hit + blks_read > 0
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - cache_hit_ratio:
            usage: "GAUGE"
            description: "Cache hit ratio percentage"
    
    # Checkpoint metrics
    pg_checkpoints:
      query: |
        SELECT 'checkpoints_timed' as type, checkpoints_timed as count FROM pg_stat_bgwriter
        UNION ALL
        SELECT 'checkpoints_req' as type, checkpoints_req as count FROM pg_stat_bgwriter
        UNION ALL
        SELECT 'checkpoint_write_time' as type, checkpoint_write_time as count FROM pg_stat_bgwriter
        UNION ALL
        SELECT 'checkpoint_sync_time' as type, checkpoint_sync_time as count FROM pg_stat_bgwriter
      metrics:
        - type:
            usage: "LABEL"
            description: "Checkpoint metric type"
        - count:
            usage: "COUNTER"
            description: "Checkpoint metric value"
    
    # Query statistics (requires pg_stat_statements extension)
    pg_stat_statements_top:
      query: |
        SELECT queryid::text,
               left(query, 100) as query_sample,
               calls,
               total_exec_time,
               mean_exec_time,
               rows
        FROM pg_stat_statements
        WHERE calls > 100
        ORDER BY total_exec_time DESC
        LIMIT 20
      metrics:
        - queryid:
            usage: "LABEL"
            description: "Query ID"
        - query_sample:
            usage: "LABEL"
            description: "First 100 characters of query"
        - calls:
            usage: "COUNTER"
            description: "Number of times executed"
        - total_exec_time:
            usage: "COUNTER"
            description: "Total time spent executing this statement in milliseconds"
        - mean_exec_time:
            usage: "GAUGE"
            description: "Mean time spent executing this statement in milliseconds"
        - rows:
            usage: "COUNTER"
            description: "Total number of rows retrieved or affected"