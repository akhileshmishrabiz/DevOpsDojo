# Production-grade Loki Stack Configuration
# Optimized for cost and performance with S3 backend

loki:
  enabled: true
  
  # Loki configuration
  config:
    # Authentication disabled for simplicity
    auth_enabled: false
    
    # Server configuration
    server:
      http_listen_port: 3100
      grpc_listen_port: 9095
      log_level: info
    
    # Limits configuration
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h  # 1 week
      max_entries_limit_per_query: 5000
      max_streams_per_user: 0
      max_global_streams_per_user: 5000
      retention_period: 720h  # 30 days
      ingestion_rate_mb: 4
      ingestion_burst_size_mb: 6
      per_stream_rate_limit: 3MB
      per_stream_rate_limit_burst: 15MB
      max_line_size: 256000
      split_queries_by_interval: 15m
      max_concurrent_tail_requests: 10
      max_cache_freshness_per_query: 10m
    
    # Common configuration
    common:
      path_prefix: /var/loki
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory
    
    # Schema configuration with S3
    schema_config:
      configs:
      - from: 2024-01-01
        store: boltdb-shipper
        object_store: s3
        schema: v12
        index:
          prefix: loki_index_
          period: 24h
    
    # Storage configuration - using S3 for cost efficiency
    storage_config:
      boltdb_shipper:
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        shared_store: s3
        cache_ttl: 24h
      
      aws:
        # Update these values for your AWS setup
        region: us-east-1
        bucketnames: devops-dojo-loki-storage  # You need to create this bucket
        s3forcepathstyle: false
        insecure: false
        sse_encryption: true
    
    # Chunk store config
    chunk_store_config:
      max_look_back_period: 720h  # 30 days
    
    # Table manager (for index cleanup)
    table_manager:
      retention_deletes_enabled: true
      retention_period: 720h  # 30 days
    
    # Query range
    query_range:
      parallelise_shardable_queries: true
      cache_results: true
      results_cache:
        cache:
          enable_fifocache: true
          fifocache:
            max_size_items: 1024
            validity: 24h
    
    # Frontend
    frontend:
      compress_responses: true
    
    # Querier
    querier:
      query_ingesters_within: 2h
    
    # Ingester
    ingester:
      chunk_idle_period: 30m
      chunk_retain_period: 1m
      max_chunk_age: 1h
      chunk_encoding: snappy
      chunk_target_size: 1048576  # 1MB
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
    
    # Compactor for S3
    compactor:
      working_directory: /var/loki/compactor
      shared_store: s3
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150
  
  # Resources for Loki
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 1
      memory: 1Gi
  
  # Persistence for local index
  persistence:
    enabled: true
    storageClassName: gp3
    size: 20Gi
    accessModes:
    - ReadWriteOnce
  
  # Security context
  securityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  
  # Service configuration
  service:
    type: ClusterIP
    port: 3100

# Gateway configuration (nginx)
gateway:
  enabled: true
  replicas: 1
  
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
  
  # Service for gateway
  service:
    type: ClusterIP
    port: 80

# Promtail configuration - log collection agent
promtail:
  enabled: true
  
  # DaemonSet configuration
  daemonset:
    enabled: true
  
  config:
    # Log positions
    positions:
      filename: /run/promtail/positions.yaml
    
    # Loki client
    clients:
    - url: http://loki-gateway/loki/api/v1/push
      tenant_id: ""
    
    # Scrape configuration for Kubernetes logs
    scrape_configs:
    # Kubernetes pod logs
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      
      pipeline_stages:
      - cri: {}
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
      - labels:
          level:
          app:
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      relabel_configs:
      # Only scrape pods from our application namespace
      - source_labels: [__meta_kubernetes_namespace]
        action: keep
        regex: 3-tier-app-eks|kube-system|monitoring
      
      # Add namespace label
      - source_labels: [__meta_kubernetes_namespace]
        target_label: namespace
      
      # Add pod label
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod
      
      # Add container label
      - source_labels: [__meta_kubernetes_pod_container_name]
        target_label: container
      
      # Add app label from pod metadata
      - source_labels: [__meta_kubernetes_pod_label_app]
        target_label: app
      
      # Set the log path
      - source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
        target_label: __path__
        separator: /
        replacement: /var/log/pods/*$1/*.log
      
      # Drop empty app labels
      - source_labels: [app]
        regex: ^$
        action: drop
    
    # Kubernetes pod logs with annotation filtering
    - job_name: kubernetes-pods-app
      kubernetes_sd_configs:
      - role: pod
      
      pipeline_stages:
      - cri: {}
      - match:
          selector: '{app=~"frontend|backend|postgres-db"}'
          stages:
          - json:
              expressions:
                timestamp: time
                level: level
                message: message
                trace_id: trace_id
          - labels:
              level:
              trace_id:
          - timestamp:
              source: timestamp
              format: RFC3339
      
      relabel_configs:
      # Only our application namespace
      - source_labels: [__meta_kubernetes_namespace]
        action: keep
        regex: 3-tier-app-eks
      
      # Only specific apps
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: frontend|backend|postgres-db
      
      # Add labels
      - source_labels: [__meta_kubernetes_namespace]
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod
      - source_labels: [__meta_kubernetes_pod_container_name]
        target_label: container
      - source_labels: [__meta_kubernetes_pod_label_app]
        target_label: app
      - source_labels: [__meta_kubernetes_pod_label_version]
        target_label: version
      
      # Log path
      - source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
        target_label: __path__
        separator: /
        replacement: /var/log/pods/*$1/*.log
  
  # Resources for Promtail
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
  
  # Mount host paths for log collection
  extraVolumes:
  - name: varlog
    hostPath:
      path: /var/log
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  
  extraVolumeMounts:
  - name: varlog
    mountPath: /var/log
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  
  # Security context
  securityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL
    allowPrivilegeEscalation: false

# Fluent Bit as alternative (disabled by default)
fluent-bit:
  enabled: false

# Grafana Agent (disabled, using Promtail)
grafana-agent:
  enabled: false

# Log gateway (nginx reverse proxy)
nginx:
  enabled: false

# Test pod for validation
test:
  enabled: false

# Additional configuration
nameOverride: ""
fullnameOverride: "loki"

# Service account
serviceAccount:
  create: true
  name: ""
  annotations: {}
  labels: {}

# RBAC
rbac:
  create: true
  pspEnabled: false

# Network policy
networkPolicy:
  enabled: false

# Global image settings
global:
  imageRegistry: ""
  imagePullSecrets: []

# Monitoring (ServiceMonitor for Prometheus)
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels:
    app: loki
    release: prometheus
  interval: 30s
  scrapeTimeout: 10s