AWSTemplateFormatVersion: '2010-09-09'
Description: 'DevOps Learning Platform - Quiz Analysis API'

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage (dev, staging, prod)
    AllowedValues:
      - dev
      - staging
      - prod

Resources:
  # DynamoDB Table for Quiz Results
  QuizResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub QuizResults-${Stage}
      BillingMode: PAY_PER_REQUEST  # Serverless pricing
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: quizId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH  # Partition key
        - AttributeName: quizId
          KeyType: RANGE  # Sort key
      Tags:
        - Key: Project
          Value: DevOpsLearningPlatform

  # IAM Role for Lambda Function
  QuizAnalysisLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: QuizAnalysisDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt QuizResultsTable.Arn

  # Lambda Function for Quiz Analysis
  QuizAnalysisLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub quiz-analysis-${Stage}
      Handler: index.handler
      Role: !GetAtt QuizAnalysisLambdaRole.Arn
      Runtime: nodejs16.x
      Timeout: 15
      MemorySize: 256
      Environment:
        Variables:
          STAGE: !Ref Stage
          DYNAMODB_TABLE: !Ref QuizResultsTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamoDB = new AWS.DynamoDB.DocumentClient();
          
          // Main Lambda handler function
          exports.handler = async (event) => {
            try {
              console.log('Event received:', JSON.stringify(event));
              
              // Parse the incoming request
              const body = JSON.parse(event.body);
              const { userId, topic, answers, correct, total, score } = body;
              
              // Determine which operation to perform based on the API path
              const path = event.path;
              let result;
              
              if (path === '/analyze-results') {
                result = await analyzeResults(userId, topic, answers, correct, total, score);
              } else if (path === '/get-recommendations') {
                result = await getRecommendations(userId, topic);
              } else if (path === '/track-progress') {
                result = await trackProgress(userId);
              } else {
                return formatResponse(400, { error: 'Invalid endpoint' });
              }
              
              return formatResponse(200, result);
            } catch (error) {
              console.error('Error processing request:', error);
              return formatResponse(500, { error: 'Internal server error', detail: error.message });
            }
          };
          
          // Analyze quiz results and identify knowledge gaps
          async function analyzeResults(userId, topic, answers, correct, total, score) {
            // Calculate strength areas and weak areas based on the answers
            const { strengths, weaknesses } = analyzeAnswerPatterns(answers);
            
            // Save results to DynamoDB for future reference
            await saveResultsToDatabase(userId, topic, answers, score, strengths, weaknesses);
            
            return {
              userId,
              topic,
              score,
              strengths,
              weaknesses,
              analysisComplete: true,
              timestamp: new Date().toISOString()
            };
          }
          
          // Get personalized recommendations based on quiz performance
          async function getRecommendations(userId, topic) {
            // Get the user's historical performance from DynamoDB
            const userResults = await getUserResults(userId);
            
            // Generate personalized recommendations based on weak areas
            const recommendations = generateRecommendations(topic, userResults);
            
            return {
              userId,
              topic,
              recommendations,
              timestamp: new Date().toISOString()
            };
          }
          
          // Track user's progress over time across different quiz attempts
          async function trackProgress(userId) {
            // Get all historical results for the user
            const userResults = await getUserResults(userId);
            
            // Analyze progression over time
            const progressAnalysis = analyzeProgress(userResults);
            
            return {
              userId,
              progressAnalysis,
              timestamp: new Date().toISOString()
            };
          }
          
          // Helper function to analyze answer patterns and identify strengths/weaknesses
          function analyzeAnswerPatterns(answers) {
            // This is a simplified example - in reality, you'd have a more complex algorithm
            // that categorizes questions by subtopic and identifies patterns
            
            const strengths = [];
            const weaknesses = [];
            
            // For this example, return some dummy data
            // In production, this would analyze actual answers
            return {
              strengths: ['Containerization Basics', 'Docker Networking'],
              weaknesses: ['Docker Volumes', 'Multi-stage Builds']
            };
          }
          
          // Save quiz results to DynamoDB
          async function saveResultsToDatabase(userId, topic, answers, score, strengths, weaknesses) {
            const params = {
              TableName: process.env.DYNAMODB_TABLE,
              Item: {
                userId,
                quizId: `${topic}-${Date.now()}`,
                topic,
                answers,
                score,
                strengths,
                weaknesses,
                timestamp: new Date().toISOString()
              }
            };
            
            try {
              await dynamoDB.put(params).promise();
              console.log('Results saved to database successfully');
              return true;
            } catch (error) {
              console.error('Error saving to database:', error);
              // Don't throw the error to avoid breaking the overall process
              return false;
            }
          }
          
          // Get user's historical quiz results from DynamoDB
          async function getUserResults(userId) {
            const params = {
              TableName: process.env.DYNAMODB_TABLE,
              KeyConditionExpression: 'userId = :userId',
              ExpressionAttributeValues: {
                ':userId': userId
              },
              ScanIndexForward: false // to get results in descending order (newest first)
            };
            
            try {
              const data = await dynamoDB.query(params).promise();
              return data.Items;
            } catch (error) {
              console.error('Error fetching user results:', error);
              return [];
            }
          }
          
          // Generate recommendations based on weak areas
          function generateRecommendations(topic, userResults) {
            // For this example, return some dummy recommendations
            // In production, this would analyze actual user performance
            
            const recommendations = [];
            
            if (topic === 'docker') {
              recommendations.push({
                type: 'Resource',
                title: 'Docker Volumes Deep Dive',
                link: 'https://docs.docker.com/storage/volumes/',
                description: 'Official documentation on Docker volumes and persistent storage'
              });
              
              recommendations.push({
                type: 'Practice',
                title: 'Volume Management Exercise',
                description: 'Create a Docker volume and use it with multiple containers'
              });
            } else if (topic === 'kubernetes') {
              recommendations.push({
                type: 'Resource',
                title: 'Kubernetes Pod Design Patterns',
                link: 'https://kubernetes.io/docs/concepts/workloads/pods/',
                description: 'Learn about pod design patterns in Kubernetes'
              });
            }
            
            return recommendations;
          }
          
          // Analyze user's progress over time
          function analyzeProgress(userResults) {
            // Group results by topic
            const topicResults = {};
            
            userResults.forEach(result => {
              if (!topicResults[result.topic]) {
                topicResults[result.topic] = [];
              }
              
              topicResults[result.topic].push({
                timestamp: result.timestamp,
                score: result.score
              });
            });
            
            // Calculate improvement for each topic
            const progressByTopic = {};
            
            Object.keys(topicResults).forEach(topic => {
              const results = topicResults[topic];
              results.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
              
              if (results.length >= 2) {
                const firstScore = results[0].score;
                const latestScore = results[results.length - 1].score;
                const improvement = latestScore - firstScore;
                
                progressByTopic[topic] = {
                  firstAttempt: results[0].timestamp,
                  latestAttempt: results[results.length - 1].timestamp,
                  attempts: results.length,
                  firstScore,
                  latestScore,
                  improvement,
                  improvementPercentage: ((improvement / firstScore) * 100).toFixed(2)
                };
              } else {
                progressByTopic[topic] = {
                  firstAttempt: results[0].timestamp,
                  latestAttempt: results[0].timestamp,
                  attempts: 1,
                  firstScore: results[0].score,
                  latestScore: results[0].score,
                  improvement: 0,
                  improvementPercentage: '0.00'
                };
              }
            });
            
            return progressByTopic;
          }
          
          // Helper function to format Lambda response
          function formatResponse(statusCode, body) {
            return {
              statusCode,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*', // CORS header for API Gateway integration
                'Access-Control-Allow-Credentials': true,
                'Access-Control-Allow-Methods': 'OPTIONS, POST, GET',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              },
              body: JSON.stringify(body)
            };
          }
      Tags:
        - Key: Project
          Value: DevOpsLearningPlatform
        - Key: Stage
          Value: !Ref Stage
          
  # API Gateway REST API
  QuizAnalysisApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub quiz-analysis-api-${Stage}
      Description: API for DevOps Learning Platform quiz analysis
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Project
          Value: DevOpsLearningPlatform
        - Key: Stage
          Value: !Ref Stage
          
  # API Gateway Resource for analyze-results endpoint
  AnalyzeResultsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ParentId: !GetAtt QuizAnalysisApi.RootResourceId
      PathPart: 'analyze-results'
      
  QuizAnalysisLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QuizAnalysisLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuizAnalysisApi}/*/*/*

  # API Gateway Method for analyze-results endpoint
  AnalyzeResultsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ResourceId: !Ref AnalyzeResultsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuizAnalysisLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
            
  # CORS Configuration for analyze-results
  AnalyzeResultsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ResourceId: !Ref AnalyzeResultsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'
          
  # API Gateway Resource for get-recommendations endpoint
  RecommendationsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ParentId: !GetAtt QuizAnalysisApi.RootResourceId
      PathPart: 'get-recommendations'
      
  # API Gateway Method for get-recommendations endpoint
  RecommendationsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ResourceId: !Ref RecommendationsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuizAnalysisLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
            
  # CORS Configuration for get-recommendations
  RecommendationsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ResourceId: !Ref RecommendationsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'
            
  # API Gateway Resource for track-progress endpoint
  TrackProgressResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ParentId: !GetAtt QuizAnalysisApi.RootResourceId
      PathPart: 'track-progress'
      
  # API Gateway Method for track-progress endpoint
  TrackProgressMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ResourceId: !Ref TrackProgressResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuizAnalysisLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
            
  # CORS Configuration for track-progress
  TrackProgressOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      ResourceId: !Ref TrackProgressResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'
            
  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AnalyzeResultsMethod
      - RecommendationsMethod
      - TrackProgressMethod
      - AnalyzeResultsOptionsMethod
      - RecommendationsOptionsMethod
      - TrackProgressOptionsMethod
    Properties:
      RestApiId: !Ref QuizAnalysisApi
      StageName: !Ref Stage
      
  # Permission for API Gateway to invoke Lambda
  QuizAnalysisLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt QuizAnalysisLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuizAnalysisApi}/*
      
Outputs:
  ApiEndpoint:
    Description: URL of the API Gateway endpoint
    Value: !Sub https://${QuizAnalysisApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    
  AnalyzeResultsUrl:
    Description: URL for the analyze-results endpoint
    Value: !Sub https://${QuizAnalysisApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/analyze-results
    
  RecommendationsUrl:
    Description: URL for the get-recommendations endpoint
    Value: !Sub https://${QuizAnalysisApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/get-recommendations
    
  TrackProgressUrl:
    Description: URL for the track-progress endpoint
    Value: !Sub https://${QuizAnalysisApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/track-progress