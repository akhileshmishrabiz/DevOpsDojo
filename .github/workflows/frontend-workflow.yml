name: Frontend CI/CD

on:
  # push:
  #   branches: [main]
  #   paths:
  #     - 'frontend/**'
  #     - '.github/workflows/frontend.yml'
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: devopsdozo/frontend
  EKS_CLUSTER_NAME: devopsdozo
  DEPLOYMENT_NAME: frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::879381241087:role/GitHubActionsEKSDeployRole
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./frontend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Deploy to EKS
        run: |
          # Update the image in the Kubernetes deployment
          kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=${{ steps.build-image.outputs.image }} -n devopsdozo
          
          # Check the rollout status
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n devopsdozo